---
  - hosts: all
    become: true
    tasks:
# removing per Jose Varas, ITS should setup necessary packages/repos for us
#      - name: install EPEL
#        yum:
#          name:
#            - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
#          state: present
#        when: ansible_distribution == 'CentOS' and ansible_distribution_version < '8'
      - name: install packages
        yum:
          name: 
            - openssl
            - postgresql
            - postgresql-server
            - epel-release
            - gcc
            - gcc-c++
            - python3-devel
            - gcc-gfortran
            - cfitsio-devel
            - git
            - python3-pip
            - httpd
            - httpd-devel
          state: latest
      - name: install CentOS8 packages
        yum:
          name:
            - libnsl
        when: ansible_distribution == 'CentOS' and ansible_distribution_version >= '8'
# tweak this to deploy when we are about to go live
      - name: install postfix
        yum:
          name:
            - postfix
        when: "'mkofits-lvX' in inventory_hostname or 'cpofits-lvX' in inventory_hostname"
      - name: configure postfix inet protocols
        lineinfile:
          path: /etc/postfix/main.cf
          line: inet_protocols = ipv4
          regex: inet_protocols
          create: yes
        when: "'mkofits-lvX' in inventory_hostname or 'cpofits-lvX' in inventory_hostname"
      - name: configure postfix relay in Hawaii
        lineinfile:
          path: /etc/postfix/main.cf
          line: relayhost = [smtp.hi.gemini.edu]:25
          regex: relayhost
          create: yes
        when: "'mkofits-lvX' in inventory_hostname"
      - name: configure postfix relay in Chile
        lineinfile:
          path: /etc/postfix/main.cf
          line: relayhost = [smtp.cl.gemini.edu]:25
          regex: relayhost
          create: yes
        when: "'cpofits-lvX' in inventory_hostname"
      - name: target pip version due to bug
        command: python3 -m pip install --upgrade "pip<10.0"
      - name: Ensure group "fitsdata" exists
        group:
          name: fitsdata
          gid: 5179
          state: present
      - name: Ensure group "geminidata" exists
        group:
          name: geminidata
          gid: 502
          state: present
      - name: Add the user 'fitsdata' with a specific uid and a primary group of 'fitsdata'
        user:
          name: fitsdata
          uid: 5179
      - name: Update user fitsdata groups to add fitsdata and geminidata
        user:
          name: fitsdata
          groups: fitsdata,geminidata
          append: yes
      - name: Update user apache groups to add fitsdata
        user:
          name: apache
          groups: fitsdata
          append: yes
      - name: Ensure FitsStorage repo folder is available and permissioned
        file:
          path: '/opt/FitsStorage'
          state: directory
          mode: 'u+rwx,g+rwx,o+rx'
          owner: fitsdata
          group: fitsdata
      - name: Checkout FitsStorage into /opt
        become: true
        become_user: fitsdata
        git:
          repo: "git@gitlab.gemini.edu:DRSoftware/FitsStorage.git"
          version: refac/migration_in_ansible_play
          dest: /opt/FitsStorage
          accept_hostkey: yes
        when: "'arc' not in inventory_hostname"
        notify: restart services
      - name: Rsync FitsStorage into /opt (AWS)
        become: false
        local_action: 
          module: shell
          _raw_params: rsync -r -e "ssh -l fitsdata -2 -i ~/id_rsa" ../.. fitsdata@arcdev.gemini.edu:/opt/FitsStorage/
        when: "'arc' in inventory_hostname"
        notify: restart services
      - name: install python packages
        command: bash -c "cd /opt/FitsStorage && python3 -m pip install -r requirements.txt"
      - name: install pip for python2 if on CentOS 7
        yum:
          name: 
            - python-pip
          state: latest
        when: ansible_distribution == 'CentOS' and ansible_distribution_version < '8'
      - name: install python packages
        command: bash -c "python -m pip install psycopg2-binary==2.8.4"
        when: ansible_distribution == 'CentOS' and ansible_distribution_version < '8'
      - name: install imexam for DRAGONS (Centos 8)
        command: bash -c "python3 -m pip install imexam specutils"
        when: ansible_distribution == 'CentOS' and ansible_distribution_version >= '8'
      - name: make dummy specutils folder to satisfy the library's bad logic
        file:
          path: /usr/share/httpd/.specutils
          state: directory
          mode: u+rwx,g+rwx,o+rwx
          owner: fitsdata
          group: fitsdata
        become: true
      - name: install imexam and specutils for DRAGONS (Centos 7)
        command: bash -c "python3 -m pip install imexam specutils"
        when: ansible_distribution == 'CentOS' and ansible_distribution_version < '8'
      - name: Set PYTHONPATH for fitsdata user for convenience
        lineinfile:
          path: /home/fitsdata/.cshrc
          line: setenv PYTHONPATH /opt/DRAGONS:/opt/FitsStorage
          regex: PYTHONPATH
          create: yes
      - name: Create folders for FitsStorage to work with files
        file:
          path: '{{ item.path }}'
          state: directory
          mode: '{{ item.mode }}'
          owner: '{{ item.owner }}'
        with_items:
          - { path: /data/logs, owner: fitsdata, group: fitsdata, mode: "u+rwx,g+rwx,o-w" }
          - { path: /data/backups, owner: fitsdata, mode: "u+rwx,g-w,o-w" }
          - { path: /data/upload_staging, owner: fitsdata, mode: "u+rwx,g-w,o-w" }
          - { path: /data/z_staging, owner: fitsdata, mode: "u+rwx,g-w,o-w" }
          - { path: /data/s3_staging, owner: fitsdata, mode: "u+rwx,g-w,o-w" }
          - { path: /data/gemini_data, owner: fitsdata, mode: "u+rwx,g-w,o-w" }
      # - name: Ensure previews folder exists
      #   file:
      #     path: /sci/dataflow/previews
      #     state: directory
      #     mode: u+rwx,g+rwx,o+rwx
      #     owner: fitsdata
      #     group: fitsdata
      #   become: true
      #   when: "'arc' not in inventory_hostname"
      - name: Checkout DRAGONS into /opt
        git:
          repo: https://github.com/GeminiDRSoftware/DRAGONS.git
          dest: /opt/DRAGONS
          version: master
        register: dragonscheckout
      - name: Cythonize DRAGONS
        command: bash -c "cd /opt/DRAGONS/gempy/library && /usr/local/bin/cythonize -3 -i cyclip.pyx"
        become: true
        become_user: root
        when: dragonscheckout.changed
      - name: Copy fitsverify to server
        copy:
          src: ../../fitsverify/
          dest: /opt/fitsverify/
          mode: u+rwx,g+rx,o+rx
        register: copiedfitsverify
      - name: Compile fitsverify
        command: gcc -L /lib64 -I /usr/include/cfitsio -o fitsverify ftverify.c fvrf_data.c fvrf_file.c fvrf_head.c fvrf_key.c fvrf_misc.c -DSTANDALONE -L. -lcfitsio -lm -lnsl-2.28
        args:
          chdir: /opt/fitsverify/
        when: copiedfitsverify.changed and ansible_distribution == 'CentOS' and ansible_distribution_version >= '8'
      - name: Compile fitsverify
        command: gcc -L /lib64 -I /usr/include/cfitsio -o fitsverify ftverify.c fvrf_data.c fvrf_file.c fvrf_head.c fvrf_key.c fvrf_misc.c -DSTANDALONE -L. -lcfitsio -lm -lnsl
        args:
          chdir: /opt/fitsverify/
        when: copiedfitsverify.changed and ansible_distribution == 'CentOS' and ansible_distribution_version < '8'
      - name: Setup PostgreSQL data directory
        file:
          path: /data/pgsql_data
          state: directory
          owner: postgres
          group: postgres
      - name: Install PostgreSQL service script
        command: cp /lib/systemd/system/postgresql.service /etc/systemd/system/
        args:
          creates: /etc/systemd/system/postgresql.service
        register: postgresql_service_installed
      - name: Configure PostgreSQL environment
        lineinfile:
          path: /etc/systemd/system/postgresql.service
          line: Environment=PGDATA=/data/pgsql_data
          regex: Environment=PGDATA
          create: yes
        register: postgresql_configured
      - name: Reload System Daemons
        command: systemctl daemon-reload
        when: postgresql_configured.changed or postgresql_service_installed.changed
      - name: Initialize PostgreSQL database
        command: bash -c "/usr/bin/postgresql-setup --initdb"
        when: postgresql_configured.changed or postgresql_service_installed.changed
        become: true
        become_user: root
      - name: Bounce PostgreSQL before building db
        service: name=postgresql state=restarted enabled=yes
      - name: Ensure we have fitsdata user with access to database
        postgresql_user: 
          name=fitsdata
          password=fitsdata
          state=present
        become: yes
        become_user: postgres
      - name: Ensure we have the fitsdata database
        postgresql_db: name=fitsdata
          encoding='UTF-8'
          lc_collate='en_US.UTF-8'
          lc_ctype='en_US.UTF-8'
          state=present
          owner=fitsdata
        register: fitsdata_db_created
        become: yes
        become_user: postgres
      - name: Update cache size for database
        lineinfile:
          path: /data/pgsql_data/postgresql.conf
          line:    effective_cache_size = 8000MB
          regex: effective_cache_size
          create: yes
      - name: Bounce PostgreSQL to get updated configuration
        service: name=postgresql state=restarted enabled=yes
        when: postgresql_configured.changed or postgresql_service_installed.changed
      - name: Enable PostgreSQL on startup
        service: name=postgresql enabled=yes
      - name: Create tables in DB
        command: bash -c "cd /opt/FitsStorage && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage python3 ./fits_storage/scripts/create_tables.py"
        become: yes
        become_user: fitsdata
        when: fitsdata_db_created.changed
      - name: Create Materialized Views
        postgresql_query:
          db: fitsdata
          login_user: fitsdata
          path_to_script: /opt/FitsStorage/sql/views.sql
        become: yes
        become_user: fitsdata
      - name: Setup Migrations
        command: bash -c "cd /opt/FitsStorage/ && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage python3 dbmigration/manage.py version_control postgresql:///fitsdata dbmigration"
        become: yes
        become_user: postgres
        when: fitsdata_db_created.changed
      - name: Apply Migrations (Idempotent, always apply)
        command: bash -c "cd /opt/FitsStorage/ && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage python3 dbmigration/manage.py upgrade --url=postgresql:///fitsdata"
        become: yes
        become_user: postgres
      - name: Ensure we have apache user with access to database
        postgresql_user: db=fitsdata
          name=apache
          password=apache
          priv=ALL
          state=present
        become: yes
        become_user: postgres
      - name: Ensure we have root user with access to database
        postgresql_user: db=fitsdata
          name=root
          priv=ALL
          state=present
        become: yes
        become_user: postgres
      - name: WORKAROUND Grant PostgreSQL table access to apache
        postgresql_query:
          db: fitsdata
          query: GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO apache   
        become: yes
        become_user: postgres
      - name: WORKAROUND Grant PostgreSQL sequence access to apache
        postgresql_query:
          db: fitsdata
          query: GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO apache
        become: yes
        become_user: postgres
      # - name: Grant PostgreSQL table access to apache
      #   postgresql_privs:
      #     db: fitsdata
      #     privs: ALL
      #     type: table
      #     objs: ALL_IN_SCHEMA
      #     role: apache
      #   become: yes
      #   become_user: postgres
      # - name: Grant PostgreSQL sequence access to apache
      #   postgresql_privs:
      #     db: fitsdata
      #     privs: ALL
      #     type: sequence
      #     objs: ALL_IN_SCHEMA
      #     role: apache
      #   become: yes
      #   become_user: postgres
      - name: Install ingest queue 1
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_ingest_queue1.service
          dest: /etc/systemd/system/fits-service_ingest_queue1.service
      - name: Install ingest queue 2
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_ingest_queue2.service
          dest: /etc/systemd/system/fits-service_ingest_queue2.service
      - name: Install ingest queue 3
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_ingest_queue.service
          dest: /etc/systemd/system/fits-service_ingest_queue3.service
        when: "'arc' in inventory_hostname"
      - name: Setup ingest 3
        lineinfile:
          path: /etc/systemd/system/fits-service_ingest_queue3.service
          line: Description=Fits Service Ingest Queue 3
          regex: Description=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Setup ingest 3 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_ingest_queue3.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_ingest_queue.py --demon --lockfile --name=siq3
          regex: ExecStart=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Install ingest queue 4
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_ingest_queue.service
          dest: /etc/systemd/system/fits-service_ingest_queue4.service
        when: "'arc' in inventory_hostname"
      - name: Setup ingest 4
        lineinfile:
          path: /etc/systemd/system/fits-service_ingest_queue4.service
          line: Description=Fits Service Ingest Queue 4
          regex: Description=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Setup ingest 4 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_ingest_queue4.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_ingest_queue.py --demon --lockfile --name=siq4
          regex: ExecStart=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Install preview queue 1
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_preview_queue.service
          dest: /etc/systemd/system/fits-service_preview_queue1.service
      - name: Setup preview 1
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue1.service
          line: Description=Fits Service Preview Queue 1
          regex: Description=
          create: no
      - name: Setup preview 1 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue1.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_preview_queue.py --demon --lockfile --name=spq1
          regex: ExecStart=
          create: no
      - name: Install preview queue 2
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_preview_queue.service
          dest: /etc/systemd/system/fits-service_preview_queue2.service
        when: "'arc' in inventory_hostname"
      - name: Setup preview 2
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue2.service
          line: Description=Fits Service Preview Queue 2
          regex: Description=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Setup preview 2 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue2.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_preview_queue.py --demon --lockfile --name=spq2
          regex: ExecStart=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Install preview queue 3
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_preview_queue.service
          dest: /etc/systemd/system/fits-service_preview_queue3.service
        when: "'arc' in inventory_hostname"
      - name: Setup preview 3
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue3.service
          line: Description=Fits Service Preview Queue 3
          regex: Description=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Setup preview 3 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue3.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_preview_queue.py --demon --lockfile --name=spq3
          regex: ExecStart=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Install preview queue 4
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-service_preview_queue.service
          dest: /etc/systemd/system/fits-service_preview_queue4.service
        when: "'arc' in inventory_hostname"
      - name: Setup preview 4
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue4.service
          line: Description=Fits Service Preview Queue 4
          regex: Description=
          create: no
        when: "'arc' in inventory_hostname"
      - name: Setup preview 4 exec
        lineinfile:
          path: /etc/systemd/system/fits-service_preview_queue4.service
          line: ExecStart=/usr/bin/python3 /opt/FitsStorage/fits_storage/scripts/service_preview_queue.py --demon --lockfile --name=spq4
          regex: ExecStart=
          create: no
        when: "'arc' in inventory_hostname"
      # TODO need to stop/start service #2 to do this, plus add a line replace
      # - name: Install export queue
      #   copy:
      #     src: ../../otherfiles/etc_systemd_system_fits-service_export_queue1.service
      #     dest: /etc/systemd/system/fits-service_export_queue1.service
      - name: Install API backend
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-api-backend.service
          dest: /etc/systemd/system/fits-api-backend.service
      - name: Install fitsstorage config
        copy:
          src: ../../otherfiles/fitsstorage.conf
          dest: /etc/fitsstorage.conf
        register: fitsstorageconf
        when: "'arc' in inventory_hostname"
        notify: restart services
      - name: Use as archive
        lineinfile:
          path: /etc/fitsstorage.conf
          line: use_as_archive = {{ use_as_archive }}
          regex: use_as_archive
          create: yes
        when: fitsstorageconf.changed
      - name: Set using_s3
        lineinfile:
          path: /etc/fitsstorage.conf
          line: using_s3 = {{ using_s3 }}
          regex: using_s3
          create: yes
        when: fitsstorageconf.changed
      - name: Set s3_bucket_name
        lineinfile:
          path: /etc/fitsstorage.conf
          line: s3_bucket_name = {{ s3_bucket_name }}
          regex: s3_bucket_name
          create: yes
        when: fitsstorageconf.changed
      - name: Set s3_backup_bucket_name
        lineinfile:
          path: /etc/fitsstorage.conf
          line: s3_backup_bucket_name = {{ s3_backup_bucket_name }}
          regex: s3_backup_bucket_name
          create: yes
        when: fitsstorageconf.changed
      - name: Set s3_staging_area
        lineinfile:
          path: /etc/fitsstorage.conf
          line: s3_staging_area = {{ s3_staging_area }}
          regex: s3_staging_area
          create: yes
        when: fitsstorageconf.changed
      - name: Set aws_access_key
        lineinfile:
          path: /etc/fitsstorage.conf
          line: aws_access_key = {{ aws_access_key }}
          regex: aws_access_key
          create: yes
        when: fitsstorageconf.changed
      - name: Set aws_secret_key
        lineinfile:
          path: /etc/fitsstorage.conf
          line: aws_secret_key = {{ aws_secret_key }}
          regex: aws_secret_key
          create: yes
        when: fitsstorageconf.changed
      - name: Register Ingest service 1
        service: name=fits-service_ingest_queue1 state=started enabled=yes
      - name: Register Ingest service 2
        service: name=fits-service_ingest_queue2 state=started enabled=yes
      - name: Register Ingest service 3
        service: name=fits-service_ingest_queue3 state=started enabled=yes
        when: "'arcdisabled' in inventory_hostname"
      - name: Register Ingest service 4
        service: name=fits-service_ingest_queue4 state=started enabled=yes
        when: "'arcdisabled' in inventory_hostname"
      - name: Register Preview service 1
        service: name=fits-service_preview_queue1 state=started enabled=yes
      - name: Register Preview service 2
        service: name=fits-service_preview_queue2 state=started enabled=yes
        when: "'arc' in inventory_hostname"
      - name: Register Preview service 3
        service: name=fits-service_preview_queue3 state=started enabled=yes
        when: "'arc' in inventory_hostname"
      - name: Register Preview service 4
        service: name=fits-service_preview_queue4 state=started enabled=yes
        when: "'arc' in inventory_hostname"
      # - name: Register Export Queue
      #   service: name=fits-service_export_queue1 state=started enabled=yes
      - name: Register API service
        service: name=fits-api-backend state=started enabled=yes
      - name: install webserver packages
        yum:
          name: 
            - httpd
            - httpd-devel
            - mod_ssl
          state: latest
      - name: Install mod_wsgi
        # built in pip seems to be busted for Ansible+CentOS8
        command: python3 -m pip install "mod_wsgi"
      - name: Setup modwsgi directory
        file:
          path: /opt/modwsgi-default
          state: directory
      - name: setup mod-wsgi
        command: /usr/local/bin/mod_wsgi-express setup-server --server-root /opt/modwsgi-default --port 80 --user apache --group apache --access-log --url-alias /static /opt/FitsStorage/htmldocroot --url-alias /favicon.ico /opt/FitsStorage/htmldocroot/favicon.ico --url-alias /robots.txt /opt/FitsStorage/htmldocroot/robots.txt --python-path /opt/FitsStorage --python-path /opt/DRAGONS  /opt/FitsStorage/fits_storage/wsgihandler.py
        args:
          creates: /opt/modwsgi-default/default.wsgi
        register: mod_wsgi_setup
      - name: Update mod-wsgi folder permissions
        file:
          path: /opt/modwsgi-default
          state: directory
          recurse: yes
          owner: apache
          group: apache
        when: mod_wsgi_setup.changed
      - name: Copy HTTPD service script
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-httpd.service
          dest: /etc/systemd/system/fits-httpd.service
      - name: Copy API service script
        copy:
          src: ../../otherfiles/etc_systemd_system_fits-api-backend.service
          dest: /etc/systemd/system/fits-api-backend.service
      - name: Copy HTTPD config
        copy:
          src: ../../otherfiles/etc-sysconfig-httpd
          dest: /etc/sysconfig/httpd
      # TODO this is a complex XML patch if we try to apply it to the default file
      - name: Copy Mod-WSGI HTTPD config
        copy:
          src: ../../otherfiles/httpd-patched-centos8.conf
          dest: /opt/modwsgi-default/httpd.conf
        notify: restart services
      - name: Set WSGI entry point
        lineinfile:
          path: /opt/modwsgi-default/handler.wsgi
          line: entry_point = '/opt/FitsStorage/fits_storage/wsgihandler.py'
          regex: "^entry_point = "
        notify: restart services
      - name: Update mod-wsgi folder permissions
        file:
          path: /opt/modwsgi-default
          state: directory
          recurse: yes
          owner: apache
          group: apache
      - name: Start WSGI service on boot
        service: name=fits-httpd enabled=yes
      - name: Start API service on boot
        service: name=fits-api-backend enabled=yes
      - name: Copy diskspace script
        copy:
          src: ../../otherfiles/diskspace.py
          dest: /home/fitsdata/diskspace.py
          owner: fitsdata
          group: fitsdata
          mode: u+rwx,g-rwx,o-rwx
      - name: Copy Crontab
        copy:
          src: ../../otherfiles/system_crontab
          dest: /etc/cron.d/fitsstorage
          owner: root
          group: root
          mode: 0644
        notify: restart cron
        when: "'arc' not in inventory_hostname"

    handlers:
      - name: restart fits-api-backend
        service: name=fits-api-backend state=restarted
        listen: "restart services"
      - name: restart fits-httpd
        service: name=fits-httpd state=restarted
        listen: "restart services"
      - name: restart ingest1
        service: name=fits-service_ingest_queue1 state=restarted
        listen: "restart services"
      - name: restart ingest2
        service: name=fits-service_ingest_queue2 state=restarted
        listen: "restart services"
      - name: restart ingest3
        service: name=fits-service_ingest_queue3 state=restarted
        listen: "restart services"
        when: "'arcdisabled' in inventory_hostname"
      - name: restart ingest4
        service: name=fits-service_ingest_queue4 state=restarted
        listen: "restart services"
        when: "'arcdisabled' in inventory_hostname"
      - name: restart preview1
        service: name=fits-service_preview_queue1 state=restarted
        listen: "restart services"
      - name: restart preview2
        service: name=fits-service_preview_queue2 state=restarted
        listen: "restart services"
        when: "'arc' in inventory_hostname"
      - name: restart preview3
        service: name=fits-service_preview_queue3 state=restarted
        listen: "restart services"
        when: "'arc' in inventory_hostname"
      - name: restart preview4
        service: name=fits-service_preview_queue4 state=restarted
        listen: "restart services"
        when: "'arc' in inventory_hostname"
      - name: restart cron
        service: name=crond state=restarted
