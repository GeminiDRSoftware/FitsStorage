      - name: Setup PostgreSQL data directory
        file:
          path: /data/pgsql_data
          state: directory
          owner: postgres
          group: postgres
        register: pgsql_data_created
      - name: SELinux Perms for PGDATA folder
        command: 'sudo semanage fcontext -a -t postgresql_db_t "/data/pgsql_data(/.*)?" && restorecon -Rv /data/pgsql_data'
        when: pgsql_data_created.changed and selinux_support
      - name: Install PostgreSQL service script
        command: cp /lib/systemd/system/postgresql.service /etc/systemd/system/
        args:
          creates: /etc/systemd/system/postgresql.service
        register: postgresql_service_installed
      - name: Configure PostgreSQL environment
        lineinfile:
          path: /etc/systemd/system/postgresql.service
          line: Environment=PGDATA=/data/pgsql_data
          regex: Environment=PGDATA
          create: yes
        register: postgresql_configured
# onsite doesn't seem to like this, needed it for arcdev - TODO conditional?
#      - name: Configure SELinux for PostgresSQL
#        command: chcon -R -t postgresql_db_t  /data/pgsql_data
#        when: postgresql_configured
      - name: Reload System Daemons
        command: systemctl daemon-reload
        when: postgresql_configured.changed or postgresql_service_installed.changed
      - name: Initialize PostgreSQL database
        command: bash -c "/usr/bin/postgresql-setup initdb"
        when: postgresql_configured.changed or postgresql_service_installed.changed
        become: true
        become_user: root
      - name: Configure PostgreSQL shared buffers
        lineinfile:
          path: /data/pgsql_data/postgresql.conf
          line: shared_buffers = 1024MB
          regex: shared_buffers =
          create: yes
        register: postgresql_configured
      - name: Bounce PostgreSQL before building db
        service: name=postgresql state=restarted enabled=yes
      - name: Ensure we have fitsdata user with access to database
        postgresql_user:
          name=fitsdata
          password=fitsdata
          state=present
        become: yes
        become_user: postgres
      - name: Ensure we have the fitsdata database
        postgresql_db: name=fitsdata
          encoding='UTF-8'
          lc_collate='en_US.UTF-8'
          lc_ctype='en_US.UTF-8'
          state=present
          owner=fitsdata
        register: fitsdata_db_created
        become: yes
        become_user: postgres
      - name: Update cache size for database
        lineinfile:
          path: /data/pgsql_data/postgresql.conf
          line:    effective_cache_size = 8000MB
          regex: effective_cache_size
          create: yes
      - name: Bounce PostgreSQL to get updated configuration
        service: name=postgresql state=restarted enabled=yes
        when: postgresql_configured.changed or postgresql_service_installed.changed
      - name: Enable PostgreSQL on startup
        service: name=postgresql enabled=yes
      - name: Create tables in DB
        command: bash -c "cd /opt/FitsStorage && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage:/opt/GeminiCalMgr:/opt/FitsStorageDB python3 ./fits_storage/scripts/create_tables.py"
        become: yes
        become_user: fitsdata
        when: fitsdata_db_created.changed
#      - name: Create Materialized Views
#        postgresql_query:
#          db: fitsdata
#          login_user: fitsdata
#          path_to_script: /opt/FitsStorage/sql/views.sql
#        become: yes
#        become_user: fitsdata
#        when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Rocky') and ansible_distribution_version >= '8'
      - name: Setup Migrations
        command: bash -c "cd /opt/FitsStorage/ && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage:/opt/FitsStorageDB:/opt/GeminiCalMgr python3 dbmigration/manage.py version_control postgresql:///fitsdata dbmigration"
        become: yes
        become_user: postgres
        when: fitsdata_db_created.changed
      - name: Set migrate_version owner in PostgreSQL
        postgresql_owner:
          db: fitsdata
          obj_name: migrate_version
          obj_type: table
          new_owner: fitsdata
        become: yes
        become_user: postgres
      - name: If we have a fresh DB, set version to 31 since we are already up to date with the migrations
        postgresql_query:
          db: fitsdata
          query: update migrate_version set version=31
        become: yes
        become_user: postgres
        when: fitsdata_db_created.changed
      - name: Apply Migrations (Idempotent, always apply)
        command: bash -c "cd /opt/FitsStorage/ && env PYTHONPATH=/opt/DRAGONS:/opt/FitsStorage:/opt/FitsStorageDB:/opt/GeminiCalMgr python3 dbmigration/manage.py upgrade postgresql:///fitsdata dbmigration"
        become: yes
        become_user: fitsdata
        when: apply_migrations
      - name: Ensure we have apache user with access to database
        postgresql_user: db=fitsdata
          name=apache
          password=apache
          priv=ALL
          state=present
        become: yes
        become_user: postgres
      - name: Ensure we have root user with access to database
        postgresql_user: db=fitsdata
          name=root
          priv=ALL
          state=present
        become: yes
        become_user: postgres
      - name: Grant PostgreSQL table access to apache
        postgresql_query:
          db: fitsdata
          query: GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO apache
        become: yes
        become_user: postgres
      - name: Grant PostgreSQL sequence access to apache
        postgresql_query:
          db: fitsdata
          query: GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO apache
        become: yes
        become_user: postgres
      - name: Ensure miscfilesplus/ghost access for fitsdata (remove if no longer needed)
        postgresql_query:
          db: fitsdata
          query: |
            grant all on public.miscfile_collection_id_seq to fitsdata;
            grant all on public.miscfile_folder_id_seq to fitsdata;
            grant all on public.miscfile_plus_id_seq to fitsdata;
            grant all on public.ghost to fitsdata;
            grant all on public.ghost_id_seq to fitsdata;
        become: yes
        become_user: postgres


