#!/usr/bin/env python3

import requests
import re
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import datetime
from optparse import OptionParser

from fits_storage.logger import logger, setdebug, setdemon
from fits_storage.config import get_config
fsc = get_config()

parser = OptionParser()
parser.add_option("--emailto", action="store", dest="toaddr",
                  default="gnda@gemini.edu",
                  help="Email Address to send to")
parser.add_option("--ndays", action="store", type="int", dest="ndays",
                  default=14, help="Number of days to query")
parser.add_option("--skipdays", action="store", type="int", dest="skipdays",
                  default=4, help="Number of days ago to start query from")
parser.add_option("--httpserver", action="store", dest="httpserver",
                  default="fits",
                  help="hostname of FitsStorage http server to query")
parser.add_option("--debug", action="store_true", dest="debug",
                  help="Increase log level to debug")
parser.add_option("--demon", action="store_true", dest="demon",
                  help="Run as a background demon, do not generate stdout")

(options, args) = parser.parse_args()

# Logging level to debug? Include stdio log?
setdebug(options.debug)
setdemon(options.demon)

if not fsc.email_from:
    logger.error("No email_from defined in Fits Storage Configuration. Exiting")
    exit(1)

# Work out the date range to query
utcnow = datetime.datetime.utcnow()
utcend = utcnow - datetime.timedelta(days=options.skipdays)
utcstart = utcend - datetime.timedelta(days=options.ndays)
daterange = "%s-%s" % (utcstart.date().strftime("%Y%m%d"),
                       utcend.date().strftime("%Y%m%d"))

# If ndays == 1 then just do a single date
if options.ndays == 1:
    daterange = "%s" % utcend.date().strftime("%Y%m%d")

url = "http://%s/calibrations/GMOS/NotFail/%s/arc/warnings" % \
      (options.httpserver, daterange)

logger.debug("URL is: %s", url)
r = requests.get(url)
html = r.text

cremissing = re.compile(r'Counted (\d*) potential missing Calibrations')
crewarning = re.compile(r'Query generated (\d*) warnings')

warnings = int(crewarning.search(html).group(1))
missing = int(cremissing.search(html).group(1))

if missing == 0:
    if options.skipdays == 0:
        subject = "No missing calibrations today. Yay!"
    else:
        subject = "No missing calibrations this week. Yay!"
else:
    subject = "MISSING CALIBRATIONS: %d missing arcs" % missing

logger.info(subject)

msg = MIMEMultipart()

text = "<h2>Calibration Check: %d missing, %d warnings.</h2> <h2>You can " \
       "re-generate the calibration check to account for data or calibrations "\
       " taken after this email was generated by going to this URL: " \
       "<a href='%s'>%s</a></h2>" % (missing, warnings, url, url)

logger.info("Calibration Check: %d missing, %d warnings.", missing, warnings)

part1 = MIMEText(text, 'html')
part2 = MIMEText(html, 'html')

msg['Subject'] = subject
msg['From'] = fsc.email_from
msg['To'] = options.toaddr
if fsc.email_replyto:
    msg['Reply-To'] = fsc.email_replyto

tolist = [options.toaddr]

# Bcc fitsadmin on all the emails...
tolist.append('fitsadmin@gemini.edu')

msg.attach(part1)
msg.attach(part2)

smtp = smtplib.SMTP(fsc.smtp_server)
smtp.sendmail(fsc.email_from, tolist, msg.as_string())
logger.info("Sent email to: %s", tolist)
smtp.quit()
